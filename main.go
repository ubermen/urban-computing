package main

import (
	"urban-computing-examples/algo"
	"urban-computing-examples/util"
)

func main() {
	//tc1Simple()
	//tc2VariableLength()
	tc3ZigzagLines()
}

func tc3ZigzagLines() {
	Q := []util.Point{
		{0.0, 0.0},
		{0.5, 50.0},
		{0.6, 10.0},
		{1.0, 30.0},
		{1.1, -20.0},
		{2.5, 100.0},
		{2.7, 10.0},
		{3.1, 0.0},
		{4.0, 50.0},
		{4.2, 90.0},
		{4.6, 40.0},
		{4.7, 80.0},
		{5.0, 30.0},
	}
	T := []util.Line{
		{[]util.Point{
			{0.0, 120.0},
			{1.0, 120.0},
			{2.0, 120.0},
			{3.0, 120.0},
			{4.0, 120.0},
			{5.0, 120.0},
		}},
		{[]util.Point{
			{0.0, 60.0},
			{1.0, 70.0},
			{2.0, 80.0},
			{3.0, 90.0},
			{4.0, 100.0},
			{5.0, 110.0},
		}},
		{[]util.Point{
			{0.0, 0.0},
			{1.0, 20.0},
			{2.0, 40.0},
			{3.0, 60.0},
			{4.0, 80.0},
			{5.0, 100.0},
		}},
		{[]util.Point{
			{0.0, -40.0},
			{1.0, -40.0},
			{2.0, -40.0},
			{3.0, -40.0},
			{4.0, -40.0},
			{5.0, -40.0},
		}},
		{[]util.Point{
			{0.0, 140.0},
			{1.0, 140.0},
			{2.0, 140.0},
			{3.0, 140.0},
			{4.0, 140.0},
			{5.0, 140.0},
		}},
		{[]util.Point{
			{0.0, 130.0},
			{1.0, 130.0},
			{2.0, 130.0},
			{3.0, 130.0},
			{4.0, 130.0},
			{5.0, 130.0},
		}},
		{[]util.Point{
			{0.0, -30.0},
			{1.0, -30.0},
			{2.0, -30.0},
			{3.0, -30.0},
			{4.0, -30.0},
			{5.0, -30.0},
		}},
	}

	result := algo.KBCT(3, Q, T)
	if result == nil {
		println("failed to find kBCT")
	} else {
		util.PrintLines(result)
	}
}

func tc2VariableLength() {
	Q := []util.Point{
		{0.0, 31.0},
		{0.2, 31.0},
		{0.4, 31.0},
		{0.6, 31.0},
		{0.8, 31.0},
		{1.0, 31.0},
		{1.2, 31.0},
		{1.4, 31.0},
		{1.6, 31.0},
		{1.8, 31.0},
		{2.0, 31.0},
		{2.2, 31.0},
		{2.4, 31.0},
		{2.6, 31.0},
		{2.8, 31.0},
		{3.0, 31.0},
		{3.2, 31.0},
		{3.4, 31.0},
		{3.6, 31.0},
		{3.8, 31.0},
		{4.0, 31.0},
		{4.2, 31.0},
		{4.4, 31.0},
		{4.6, 31.0},
		{4.8, 31.0},
		{5.0, 31.0},
	}
	T := []util.Line{
		{[]util.Point{
			{0.0, 0.0},
			{1.0, 0.0},
			{2.0, 0.0},
			{3.0, 0.0},
			{4.0, 0.0},
			{5.0, 0.0},
		}},
		{[]util.Point{
			{0.0, 10.0},
			{1.0, 10.0},
			{2.0, 10.0},
			{3.0, 10.0},
			{4.0, 10.0},
			{5.0, 10.0},
		}},
		{[]util.Point{
			{0.0, 20.0},
			{1.0, 20.0},
			{2.0, 20.0},
			{3.0, 20.0},
			{4.0, 20.0},
			{5.0, 20.0},
		}},
		{[]util.Point{
			{0.0, 30.0},
			{1.0, 30.0},
			{2.0, 30.0},
			{3.0, 30.0},
			{4.0, 30.0},
			{5.0, 30.0},
			{6.0, 30.0},
			{7.0, 30.0},
			{8.0, 30.0},
			{9.0, 30.0},
			{10.0, 30.0},
			{11.0, 30.0},
		}},
		{[]util.Point{
			{0.0, 40.0},
			{1.0, 40.0},
			{2.0, 40.0},
			{3.0, 40.0},
			{4.0, 40.0},
			{5.0, 40.0},
		}},
		{[]util.Point{
			{0.0, 50.0},
			{1.0, 50.0},
			{2.0, 50.0},
			{3.0, 50.0},
			{4.0, 50.0},
			{5.0, 50.0},
		}},
		{[]util.Point{
			{0.0, 60.0},
			{1.0, 60.0},
			{2.0, 60.0},
			{3.0, 60.0},
			{4.0, 60.0},
			{5.0, 60.0},
		}},
		{[]util.Point{
			{0.0, 70.0},
			{1.0, 70.0},
			{2.0, 70.0},
			{3.0, 70.0},
			{4.0, 70.0},
			{5.0, 70.0},
		}},
	}

	result := algo.KBCT(3, Q, T)
	if result == nil {
		println("failed to find kBCT")
	} else {
		util.PrintLines(result)
	}
}

func tc1Simple() {
	/*
		k-BCT 예제: k = 3인 경우 T로부터 Q의 k-NN 찾기

		T0 --------------------
		T1 --------------------
		T2 --------------------
		T3 --------------------
		Q  -------------------- (T3와 거의 붙어있는 정도에 위치)
		T4 --------------------
		T5 --------------------
		T6 --------------------
		T6 --------------------

		input = 3, Q, T
		expected result = {T2, T3, T4}
	*/
	Q := []util.Point{
		{0.0, 31.0},
		{1.0, 31.0},
		{2.0, 31.0},
		{3.0, 31.0},
		{4.0, 31.0},
		{5.0, 31.0},
	}
	T := []util.Line{
		{[]util.Point{
			{0.0, 0.0},
			{1.0, 0.0},
			{2.0, 0.0},
			{3.0, 0.0},
			{4.0, 0.0},
			{5.0, 0.0},
		}},
		{[]util.Point{
			{0.0, 10.0},
			{1.0, 10.0},
			{2.0, 10.0},
			{3.0, 10.0},
			{4.0, 10.0},
			{5.0, 10.0},
		}},
		{[]util.Point{
			{0.0, 20.0},
			{1.0, 20.0},
			{2.0, 20.0},
			{3.0, 20.0},
			{4.0, 20.0},
			{5.0, 20.0},
		}},
		{[]util.Point{
			{0.0, 30.0},
			{1.0, 30.0},
			{2.0, 30.0},
			{3.0, 30.0},
			{4.0, 30.0},
			{5.0, 30.0},
		}},
		{[]util.Point{
			{0.0, 40.0},
			{1.0, 40.0},
			{2.0, 40.0},
			{3.0, 40.0},
			{4.0, 40.0},
			{5.0, 40.0},
		}},
		{[]util.Point{
			{0.0, 50.0},
			{1.0, 50.0},
			{2.0, 50.0},
			{3.0, 50.0},
			{4.0, 50.0},
			{5.0, 50.0},
		}},
		{[]util.Point{
			{0.0, 60.0},
			{1.0, 60.0},
			{2.0, 60.0},
			{3.0, 60.0},
			{4.0, 60.0},
			{5.0, 60.0},
		}},
		{[]util.Point{
			{0.0, 70.0},
			{1.0, 70.0},
			{2.0, 70.0},
			{3.0, 70.0},
			{4.0, 70.0},
			{5.0, 70.0},
		}},
	}

	result := algo.KBCT(3, Q, T)
	if result == nil {
		println("failed to find kBCT")
	} else {
		util.PrintLines(result)
	}
}
